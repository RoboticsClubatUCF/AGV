<launch>
    <param name="/use_sim_time" value="true" />

    <!-- configuring CLI arguments -->
    <arg name="robot" default="choo_2" />
    <arg name="robot_desc" default="$(find ugv_description)/urdf/$(arg robot)/model.urdf.xacro" />
    <arg name="world" default="empty"/>
    <arg name="gazebo" default="false" />   <!-- launch the full Gazebo gui window (resource intensive)-->
    <arg name="rviz" default="false"/>   <!-- use rviz window for robot information -->
    <arg name="rviz_cfg" default="$(find ugv_sim)/rviz/bowser2.rviz" />
    <arg name="slam" default="true" />
    <arg name="debug" default="false" />
    <arg name="no_costmap_2d" default="false" />

    <!-- launching gazebo_ros, which is just gazebo with ros integrated -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="$(find ugv_sim)/worlds/$(arg world).world"/>  -->
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gazebo)"/>
        <arg name="recording" value="false"/> 
        <arg name="debug" value="false"/>
        <arg name="verbose" value="true"/>
    </include>

    <!-- load robot description to parameter server (for robot_state_publisher) -->
    <param name="robot_description" command="$(find xacro)/xacro $(arg robot_desc)" />

     <!-- spawn our model in gazebo by building urdf from xacro -->
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot)"
        args="-param robot_description -urdf -model $(arg robot)" respawn="false"/>

    <!-- use robot description to publish robot tf tree -->
    <!-- tf_prefix: robot tf transforms are prepended with bowser2 to match model.sdf plugin convention-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="tf_prefix" type="string" value=""/>
    </node>

    <!-- publishes tf transforms between joints -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    <!-- <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
        <rosparam command="load" file="$(find ugv_nav)/config/robot_localization/ekf.yaml" />
    </node> -->

    <!-- launches rviz with specified configuration (if CLI arg is true)-->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_cfg)"/>

    <!-- slam_toolbox generates map in real-time as robot moves around (SLAM) -->
    <!-- <node if="$(arg slam)" pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen">
        <rosparam command="load" file="$(find ugv_nav)/config/slam.yaml" />
    </node> -->

    <!-- publishes the pose (geometry_msgs/PoseWithCovarianceStamped) of robot from simulation plugin (nav_msgs/Odometry) -->
    <!-- <node pkg="ugv_sim" type="pose_publisher.py" name="pose_publisher" output="screen" /> -->

    <include file="$(find ugv_nav)/launch/nav.launch" />

</launch>