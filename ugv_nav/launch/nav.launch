<launch>
    
    <!-- move_base -->
    <node pkg="move_base" type="move_base" name="move_base" output="screen">
        <rosparam file="$(find ugv_nav)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find ugv_nav)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find ugv_nav)/config/move_base/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find ugv_nav)/config/move_base/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(find ugv_nav)/config/move_base/base_local_planner_params.yaml" command="load" />
    </node>
    
    <!-- ROBOT_LOCALIZATION-->
    <!--
     This launch file (dual_ekf_navsat_example.launch) provides an example of how to work with GPS data using robot_localization. It runs three nodes:
       (1) An EKF instance that fuses odometry and IMU data and outputs an odom-frame state estimate
       (2) A second EKF instance that fuses the same data, but also fuses the transformed GPS data from (3)
       (3) An instance of navsat_transform_node, which takes in GPS data and produces pose data that has been
           transformed into your robot's world frame (here, map). The node produces a map-frame state estimate.

       The first EKF instance produces the odom->base_link transform. The second EKF produces the map->odom transform,
       but requires the odom->base_link transform from the first instance in order to do so. See the
       params/dual_ekf_navsat_example.yaml file for parameter specification.
    -->

    <rosparam command="load" file="$(find ugv_nav)/config/robot_localization/dual_ekf_navsat.yaml" />

    <!-- (1)
         INPUT:     /odom and /imu topics
         OUTPUT:    odom->base_link transform
    -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered/local" />
    </node>

    <!-- (2)
         INPUT:     /odom, /imu, and GPS odometry from (3)
         OUTPUT:    odom->map transform (augmented with GPS)
    -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered/map" />
    </node>


    <!-- (3)
         INPUT:     /fix, /odometry, /imu
         OUTPUT:    /odometry/gps, /filtered_gps
    -->
    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered/map" />
        <remap from="imu/data" to="/vectornav/iMU" />
        <remap from="gps/fix" to="/choo_2/fix" />
    </node>

</launch>